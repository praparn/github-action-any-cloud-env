name: 'AWS Initial Foundation'
on:
  push:
    tags:
      - 'aws-init-foundation*'
  pull_request:
    tags:
      - 'aws-init-foundation*'
env:
  s3exits: 'yes'

jobs:
  check-s3-bucket:
    runs-on: ubuntu-latest
    env:
      TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}

    steps:
    # Configure AWS credential with region
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESSKEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Verify S3 bucket for housing state file
    - name: Verify S3 bucket for housing state file
      run: |
        if aws s3 ls "s3://${{ secrets.AWS_BUCKETNAME }}" 2>&1 | grep -q 'The specified bucket does not exist'
        then
          echo "s3exits=no" >> $GITHUB_ENV
        elseif
          echo "s3exits=yes" >> $GITHUB_ENV
        fi

  create-foundation1:
    needs: [check-s3-bucket]
    runs-on: ubuntu-latest
    env:
      working-directory: ./aws/
      TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout code
    - uses: actions/checkout@master
      name: Git checkout code

      # Prepare Configuration and Seed file 
    - name: Setup system configruation
      run: |
        # Clone template file and preparation
        if [[ ${{ env.s3exits }} == *"no"* ]]; then
        echo "Error !!!. TFState location is unavaliable !!!. Please check location of statefile before continute"
        exit 1
        fi
        cp ./99.Systemplate/00_provider.tftemplate ./99.Systemplate/00_provider.tf
        sed -i -e "s/<bucket>/${{ secrets.AWS_BUCKETNAME }}/g" ./99.Systemplate/00_provider.tf
        sed -i -e "s/<region>/${{ secrets.AWS_REGION }}/g" ./99.Systemplate/00_provider.tf
        cat ./99.Systemplate/00_provider.tf

    - uses: actions-js/push@master
      name: Commit and push result back
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: "Commit for update result create-foundation1"


  create-foundation2:
    needs: [create-foundation1]
    runs-on: ubuntu-latest
    env:
      working-directory: ./aws/1.Environment/01_BaseEnvironment/
      TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout code
    - uses: actions/checkout@master
      name: Git checkout code

      # Copy global configuration to target folder and configure
    - name: Copy global configuration and Configure TFState
      run: |
       cp ../../99.Systemplate/global_variable.auto.tfvars ./global_variable.auto.tfvars
       cp ../../99.Systemplate/global_variables.tf ./global_variables.tf
       if [ ! -f ./00_provider.tf ]
       then
       cp ../../99.Systemplate/00_provider.tf ./00_provider.tf
       sed -i -e "s/<keyname>/01_BaseEnvironment.tfstate/g" ./00_provider.tf
       fi

    - name: Load Terraform to operate
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.9

    - name: Terraform readiness verify
      id: fmt1
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Terraform initialize
      id: init1
      run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESSKEY }}" -backend-config="secret_key=${{ secrets.AWS_SECRET }}" -backend-config="region=${{ secrets.AWS_REGION }}" -input=false

    - name: Terraform validation configuration step1
      id: validate1
      run: terraform validate -no-color

    - name: Terraform configuration step2
      id: plan1
      run: terraform plan -no-color -out=tfplan
      continue-on-error: false

    - name: Terraform create
      id: apply1
      run: terraform apply -input=false tfplan
      continue-on-error: false

    - name: Terraform export output
      id: output1
      run: terraform output > ../../99.Systemplate/system_variable.auto.tfvars
      continue-on-error: false

      # CleanUp process
    - name: CleanUp temporary file & trim output
      run: | 
        sed '/::/d' ../../99.Systemplate/system_variable.auto.tfvars > ../../99.Systemplate/system_variable.auto.tfvars.tmp && mv ../../99.Systemplate/system_variable.auto.tfvars.tmp ../../99.Systemplate/system_variable.auto.tfvars
        sed '/output/d' ../../99.Systemplate/system_variable.auto.tfvars > ../../99.Systemplate/system_variable.auto.tfvars.tmp && mv ../../99.Systemplate/system_variable.auto.tfvars.tmp ../../99.Systemplate/system_variable.auto.tfvars
        grep "\S" ../../99.Systemplate/system_variable.auto.tfvars > ../../99.Systemplate/system_variable.auto.tfvars.tmp && mv ../../99.Systemplate/system_variable.auto.tfvars.tmp ../../99.Systemplate/system_variable.auto.tfvars
        rm ./global_variable.auto.tfvars
        rm ./global_variables.tf


    - uses: actions-js/push@master
      name: Commit and push result back
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: "Commit for update result create-foundation2"


  create-foundation3:
    needs: [create-foundation2]
    runs-on: ubuntu-latest
    env:
      working-directory: ./aws/1.Environment/02_InitialParameter/
      TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout code
    - uses: actions/checkout@master
      name: Git checkout code

    # Copy global configuration to target folder and configure
    - name: Copy global configuration and Configure TFState
      run: |
       cp ../../99.Systemplate/global_variable.auto.tfvars ./global_variable.auto.tfvars
       cp ../../99.Systemplate/global_variables.tf ./global_variables.tf
       cp ../../99.Systemplate/system_variable.auto.tfvars ./system_variable.auto.tfvars
       cp ../../99.Systemplate/system_variables.tf ./system_variables.tf
       if [ ! -f ./00_provider.tf ]
       then
       cp ../../99.Systemplate/00_provider.tf ./00_provider.tf
       sed -i -e "s/<keyname>/02_InitialParameter.tfstate/g" ./00_provider.tf
       fi

    - name: Check certificate and generate certificate
      run: |
       if [ ! -f cert-template.pub ]
       then

       echo "Warning !!! No public key found. System will help to auto-generate certificate for you. Anyway please copy your private key immediatly after this process complete for avoid let private key store on git repository !!!"
       ssh-keygen -t rsa -N '' -f ./cert-template
       publickey="$(cat ./cert-template.pub)"
       echo "TF_VAR_public_key=$(echo $publickey)" >> $GITHUB_ENV

       else
       echo "Start to import public certificate to sytem variable"
       publickey="$(cat ./cert-template.pub)"
       echo "TF_VAR_public_key=$(echo $publickey)" >> $GITHUB_ENV

       fi

    - name: Load Terraform to operate
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.9

    - name: Terraform readiness verify
      id: fmt2
      run: terraform fmt -check
      continue-on-error: true
    
    - name: Terraform initialize
      id: init2
      run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESSKEY }}" -backend-config="secret_key=${{ secrets.AWS_SECRET }}" -backend-config="region=${{ secrets.AWS_REGION }}" -input=false

    - name: Terraform validation configuration step1
      id: validate2
      run: terraform validate -no-color

    - name: Terraform configuration step2
      id: plan2
      run: terraform plan -no-color -out=tfplan -input=false
      continue-on-error: false

    - name: Terraform create
      id: apply2
      run: terraform apply -input=false tfplan
      continue-on-error: false

      # CleanUp process
    - name: CleanUp temporary file
      run: | 
        rm ./global_variable.auto.tfvars
        rm ./global_variables.tf
        rm ./system_variable.auto.tfvars
        rm ./system_variables.tf

    - uses: actions-js/push@master
      name: Commit and push result back
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: "Commit for update result create-foundation3"
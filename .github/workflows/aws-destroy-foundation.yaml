name: 'AKS destroy cluster'
on:
  push:
    tags:
      - 'aws-destroy-foundation*'
  pull_request:
    tags:
      - 'aws-destroy-foundation*'
env:
  s3exits: 'yes'

jobs:
  check-s3-bucket:
    runs-on: ubuntu-latest
    env:
      TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}

    steps:
    # Configure AWS credential with region
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESSKEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Verify S3 bucket for housing state file
    - name: Verify S3 bucket for housing state file
      run: |
        if aws s3 ls "s3://${{ secrets.AWS_BUCKETNAME }}" 2>&1 | grep -q 'The specified bucket does not exist'
        then
          echo "::set-env name=s3exits::no"
        elseif
          echo "::set-env name=s3exits::yes"
        fi
  destroy-cluster:
    runs-on: ubuntu-latest
    env:
        working-directory: ./azure-aks/
        TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
        TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
        TF_VAR_region: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: ${{env.working-directory}}
    steps:
      # Checkout code
    - uses: actions/checkout@master
      name: Git checkout code

      # Seed file for system configuration
    - name: Setup system configruation
      run: | 
        # Sed to setup environment
        sed -i -e "s/###resource_group###/${{ secrets.AZURE_RESOURCEGROUP }}/g" ./terraform.tfvars
        sed -i -e "s/###storage_accname###/${{ secrets.AZURE_STORAGEACCOUNT }}/g" ./terraform.tfvars
        sed -i -e "s/###cluster_name###/${{ secrets.AZURE_CLUSTERNAME }}/g" ./terraform.tfvars
        sed -i -e "s/###resource_group###/${{ secrets.AZURE_RESOURCEGROUP }}/g" ./00_provider.tf
        sed -i -e "s/###storage_accname###/${{ secrets.AZURE_STORAGEACCOUNT }}/g" ./00_provider.tf
        sed -i -e "s/###cluster_name###/${{ secrets.AZURE_CLUSTERNAME }}/g" ./00_provider.tf

    - name: Load Terraform to operate
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.8

    - name: AKS readiness verify
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
    
    - name: AKS initialize
      id: init
      run: terraform init -input=false

    - name: AKS validation configuration step1
      id: validate
      run: terraform validate -no-color

    - name: AKS destroy farm
      id: destroy
      run: terraform destroy --auto-approve
      continue-on-error: true

    - name: Rollback all Propertie KUBECONFIG
      run: | 
        # Cleanup KUBECONFIG
        echo " " > aks-config
        cp "./00_provider-template.tftemplate" "./00_provider.tf"
        cp "./terraform-template.tfvarstemplate" "./terraform.tfvars"

    - uses: actions-js/push@master
      name: Commit and push result back
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: "Commit for update result create environment"
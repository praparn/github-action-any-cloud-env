name: 'AWS destroy cluster'
on:
  push:
    tags:
      - 'aws-destroy-foundation*'
  pull_request:
    tags:
      - 'aws-destroy-foundation*'
env:
  s3exits: 'yes'

jobs:
  check-s3-bucket:
    runs-on: ubuntu-latest
    env:
      TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
      TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
      TF_VAR_region: ${{ secrets.AWS_REGION }}

    steps:
    # Configure AWS credential with region
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESSKEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Verify S3 bucket for housing state file
    - name: Verify S3 bucket for housing state file
      run: |
        if aws s3 ls "s3://${{ secrets.AWS_BUCKETNAME }}" 2>&1 | grep -q 'The specified bucket does not exist'
        then
          echo "s3exits=no" >> $GITHUB_ENV
        elseif
          echo "s3exits=yes" >> $GITHUB_ENV
        fi

  destroy-foundation1:
    needs: [check-s3-bucket]
    runs-on: ubuntu-latest
    env:
        working-directory: ./aws/1.Environment/02_InitialParameter/
        TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
        TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
        TF_VAR_region: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout code
    - uses: actions/checkout@master
      name: Git checkout code

    # Copy global configuration to target folder and configure
    - name: Copy global configuration, Configure TFState and Update public_key
      run: |
        if [[ ${{ env.s3exits }} == *"no"* ]]; then
        echo "Error !!!. TFState location is unavaliable !!!. Please check location of statefile before continute";
        exit 1
        fi
        cp ../../99.Systemplate/global_variable.auto.tfvars ./global_variable.auto.tfvars
        cp ../../99.Systemplate/global_variables.tf ./global_variables.tf
        cp ../../99.Systemplate/system_variable.auto.tfvars ./system_variable.auto.tfvars
        cp ../../99.Systemplate/system_variables.tf ./system_variables.tf
        if [ ! -f ./00_provider.tf ]
        then
        echo "Error !!!. TFState location is unavaliable !!!. Please check location of statefile before continute";
        exit 1
        fi
        publickey="$(cat ./cert-template.pub)"
        echo "TF_VAR_public_key=$(echo $publickey)" >> $GITHUB_ENV

    - name: Get TimeStamp
      id: time
      uses: nanzm/get-time-action@v1.1
      with:
        timeZone: 7
        format: 'YYYY-MM-DD-HH-mm-ss'

    - name: Load Terraform to operate
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.8
    
    - name: Terraform initialize
      id: init1
      run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESSKEY }}" -backend-config="secret_key=${{ secrets.AWS_SECRET }}" -backend-config="region=${{ secrets.AWS_REGION }}" -input=false

    - name: Terraform validation configuration step1
      id: validate1
      run: terraform validate -no-color

    - name: Terraform destroy plan
      id: validate2
      run: terraform plan -destroy

    - name: Terraform destroy element
      id: destroy1
      env:
          TIME: "${{ steps.time.outputs.time }}"
      run: terraform destroy --auto-approve > ./log/Result_$TIME.log
      continue-on-error: true

    - name: CleanUp Process
      run: |
       rm ./global_variable.auto.tfvars
       rm ./global_variables.tf
       rm ./system_variable.auto.tfvars
       rm ./system_variables.tf
       if [ -f ./00_provider.tf ]
       then
       rm ./00_provider.tf
       fi

    - uses: actions-js/push@master
      name: Commit and push result back
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: "Commit for update result create environment"


  destroy-foundation2:
    needs: [destroy-foundation1]
    runs-on: ubuntu-latest
    env:
        working-directory: ./aws/1.Environment/01_BaseEnvironment/
        TF_VAR_access_key: ${{ secrets.AWS_ACCESSKEY }}
        TF_VAR_secret_key: ${{ secrets.AWS_SECRET }}
        TF_VAR_region: ${{ secrets.AWS_REGION }}

    defaults:
      run:
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout code
    - uses: actions/checkout@master
      name: Git checkout code

    # Copy global configuration to target folder and configure
    - name: Copy global configuration and Configure TFState
      run: |
       cp ../../99.Systemplate/global_variable.auto.tfvars ./global_variable.auto.tfvars
       cp ../../99.Systemplate/global_variables.tf ./global_variables.tf
       if [ ! -f ./00_provider.tf ]
       then
       echo "Error !!!. TFState location is unavaliable !!!. Please check location of statefile before continute";
       exit 1
       fi

    - name: Get TimeStamp
      id: time
      uses: nanzm/get-time-action@v1.1
      with:
        timeZone: 7
        format: 'YYYY-MM-DD-HH-mm-ss'

    - name: Load Terraform to operate
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.8
    
    - name: Terraform initialize
      id: init1
      run: terraform init -backend-config="access_key=${{ secrets.AWS_ACCESSKEY }}" -backend-config="secret_key=${{ secrets.AWS_SECRET }}" -backend-config="region=${{ secrets.AWS_REGION }}" -input=false

    - name: Terraform validation configuration step1
      id: validate1
      run: terraform validate -no-color

    - name: Terraform destroy plan
      id: validate2
      run: terraform plan -destroy

    - name: Terraform destroy element
      id: destroy1
      env:
        TIME: "${{ steps.time.outputs.time }}"
      run: terraform destroy --auto-approve > ./log/Result_$TIME.log
      continue-on-error: true

    - name: CleanUp Process
      run: |
       rm ./global_variable.auto.tfvars
       rm ./global_variables.tf
       if [ -f ./00_provider.tf ]
       then
       rm ./00_provider.tf
       fi

      # Last checkout before pull
    - uses: actions/checkout@master
      name: Git update result from previous step

    - uses: actions-js/push@master
      name: Commit and push result back
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        message: "Commit for update result create environment"